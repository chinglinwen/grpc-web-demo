// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	// Creates a server, and returns the new Server.
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Gets a server. Returns NOT_FOUND if the server does not exist.
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Lists servers. The order is unspecified but deterministic. Newly created
	// servers will not necessarily be added to the end of this list.
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Deletes a server. Returns NOT_FOUND if the server does not exist.
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Merges two servers by adding all disks from the server named
	// `other_server_name` to server `name`, and deletes
	// `other_server_name`. Returns the updated server.
	// The book ids of the moved disks may not be the same as the original disks.
	//
	// Returns NOT_FOUND if either server does not exist.
	// This call is a no-op if the specified servers are the same.
	MergeServers(ctx context.Context, in *MergeserversRequest, opts ...grpc.CallOption) (*Server, error)
	// Creates a book, and returns the new Disk.
	CreateDisk(ctx context.Context, in *CreateDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	// Gets a book. Returns NOT_FOUND if the book does not exist.
	GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	// Lists disks in a server. The order is unspecified but deterministic. Newly
	// created disks will not necessarily be added to the end of this list.
	// Returns NOT_FOUND if the server does not exist.
	ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error)
	// Deletes a book. Returns NOT_FOUND if the book does not exist.
	DeleteDisk(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates a book. Returns INVALID_ARGUMENT if the name of the book
	// is non-empty and does not equal the existing name.
	UpdateDisk(ctx context.Context, in *UpdateDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	// Moves a book to another server, and returns the new book. The book
	// id of the new book may not be the same as the original book.
	MoveDisk(ctx context.Context, in *MoveDiskRequest, opts ...grpc.CallOption) (*Disk, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) MergeServers(ctx context.Context, in *MergeserversRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/MergeServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateDisk(ctx context.Context, in *CreateDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/CreateDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/GetDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error) {
	out := new(ListDisksResponse)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/ListDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DeleteDisk(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/DeleteDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateDisk(ctx context.Context, in *UpdateDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/UpdateDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) MoveDisk(ctx context.Context, in *MoveDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, "/core.wcloud.io.v1.ServerService/MoveDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	// Creates a server, and returns the new Server.
	CreateServer(context.Context, *CreateServerRequest) (*Server, error)
	// Gets a server. Returns NOT_FOUND if the server does not exist.
	GetServer(context.Context, *GetServerRequest) (*Server, error)
	// Lists servers. The order is unspecified but deterministic. Newly created
	// servers will not necessarily be added to the end of this list.
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*Server, error)
	// Deletes a server. Returns NOT_FOUND if the server does not exist.
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	// Merges two servers by adding all disks from the server named
	// `other_server_name` to server `name`, and deletes
	// `other_server_name`. Returns the updated server.
	// The book ids of the moved disks may not be the same as the original disks.
	//
	// Returns NOT_FOUND if either server does not exist.
	// This call is a no-op if the specified servers are the same.
	MergeServers(context.Context, *MergeserversRequest) (*Server, error)
	// Creates a book, and returns the new Disk.
	CreateDisk(context.Context, *CreateDiskRequest) (*Disk, error)
	// Gets a book. Returns NOT_FOUND if the book does not exist.
	GetDisk(context.Context, *GetDiskRequest) (*Disk, error)
	// Lists disks in a server. The order is unspecified but deterministic. Newly
	// created disks will not necessarily be added to the end of this list.
	// Returns NOT_FOUND if the server does not exist.
	ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error)
	// Deletes a book. Returns NOT_FOUND if the book does not exist.
	DeleteDisk(context.Context, *DeleteDiskRequest) (*emptypb.Empty, error)
	// Updates a book. Returns INVALID_ARGUMENT if the name of the book
	// is non-empty and does not equal the existing name.
	UpdateDisk(context.Context, *UpdateDiskRequest) (*Disk, error)
	// Moves a book to another server, and returns the new book. The book
	// id of the new book may not be the same as the original book.
	MoveDisk(context.Context, *MoveDiskRequest) (*Disk, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) CreateServer(context.Context, *CreateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedServerServiceServer) GetServer(context.Context, *GetServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedServerServiceServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedServerServiceServer) UpdateServer(context.Context, *UpdateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedServerServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedServerServiceServer) MergeServers(context.Context, *MergeserversRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeServers not implemented")
}
func (UnimplementedServerServiceServer) CreateDisk(context.Context, *CreateDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisk not implemented")
}
func (UnimplementedServerServiceServer) GetDisk(context.Context, *GetDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisk not implemented")
}
func (UnimplementedServerServiceServer) ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisks not implemented")
}
func (UnimplementedServerServiceServer) DeleteDisk(context.Context, *DeleteDiskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisk not implemented")
}
func (UnimplementedServerServiceServer) UpdateDisk(context.Context, *UpdateDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisk not implemented")
}
func (UnimplementedServerServiceServer) MoveDisk(context.Context, *MoveDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDisk not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_MergeServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeserversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).MergeServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/MergeServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).MergeServers(ctx, req.(*MergeserversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/CreateDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateDisk(ctx, req.(*CreateDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/GetDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetDisk(ctx, req.(*GetDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/ListDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListDisks(ctx, req.(*ListDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DeleteDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DeleteDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/DeleteDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DeleteDisk(ctx, req.(*DeleteDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/UpdateDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateDisk(ctx, req.(*UpdateDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_MoveDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).MoveDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.wcloud.io.v1.ServerService/MoveDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).MoveDisk(ctx, req.(*MoveDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.wcloud.io.v1.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _ServerService_CreateServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _ServerService_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _ServerService_ListServers_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _ServerService_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _ServerService_DeleteServer_Handler,
		},
		{
			MethodName: "MergeServers",
			Handler:    _ServerService_MergeServers_Handler,
		},
		{
			MethodName: "CreateDisk",
			Handler:    _ServerService_CreateDisk_Handler,
		},
		{
			MethodName: "GetDisk",
			Handler:    _ServerService_GetDisk_Handler,
		},
		{
			MethodName: "ListDisks",
			Handler:    _ServerService_ListDisks_Handler,
		},
		{
			MethodName: "DeleteDisk",
			Handler:    _ServerService_DeleteDisk_Handler,
		},
		{
			MethodName: "UpdateDisk",
			Handler:    _ServerService_UpdateDisk_Handler,
		},
		{
			MethodName: "MoveDisk",
			Handler:    _ServerService_MoveDisk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
