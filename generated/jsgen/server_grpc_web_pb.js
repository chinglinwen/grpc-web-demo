/**
 * @fileoverview gRPC-Web generated client stub for core.wcloud.io.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: server.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var google_api_client_pb = require('./google/api/client_pb.js')

var google_api_field_behavior_pb = require('./google/api/field_behavior_pb.js')

var google_api_resource_pb = require('./google/api/resource_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js')
const proto = {};
proto.core = {};
proto.core.wcloud = {};
proto.core.wcloud.io = {};
proto.core.wcloud.io.v1 = require('./server_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.core.wcloud.io.v1.ServerServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.CreateServerRequest,
 *   !proto.core.wcloud.io.v1.Server>}
 */
const methodDescriptor_ServerService_CreateServer = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/CreateServer',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.CreateServerRequest,
  proto.core.wcloud.io.v1.Server,
  /**
   * @param {!proto.core.wcloud.io.v1.CreateServerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Server.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.CreateServerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Server)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Server>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.createServer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/CreateServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_CreateServer,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.CreateServerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Server>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.createServer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/CreateServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_CreateServer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.GetServerRequest,
 *   !proto.core.wcloud.io.v1.Server>}
 */
const methodDescriptor_ServerService_GetServer = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/GetServer',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.GetServerRequest,
  proto.core.wcloud.io.v1.Server,
  /**
   * @param {!proto.core.wcloud.io.v1.GetServerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Server.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.GetServerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Server)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Server>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.getServer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/GetServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_GetServer,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.GetServerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Server>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.getServer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/GetServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_GetServer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.ListServersRequest,
 *   !proto.core.wcloud.io.v1.ListServersResponse>}
 */
const methodDescriptor_ServerService_ListServers = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/ListServers',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.ListServersRequest,
  proto.core.wcloud.io.v1.ListServersResponse,
  /**
   * @param {!proto.core.wcloud.io.v1.ListServersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.ListServersResponse.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.ListServersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.ListServersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.ListServersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.listServers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/ListServers',
      request,
      metadata || {},
      methodDescriptor_ServerService_ListServers,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.ListServersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.ListServersResponse>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.listServers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/ListServers',
      request,
      metadata || {},
      methodDescriptor_ServerService_ListServers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.UpdateServerRequest,
 *   !proto.core.wcloud.io.v1.Server>}
 */
const methodDescriptor_ServerService_UpdateServer = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/UpdateServer',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.UpdateServerRequest,
  proto.core.wcloud.io.v1.Server,
  /**
   * @param {!proto.core.wcloud.io.v1.UpdateServerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Server.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.UpdateServerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Server)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Server>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.updateServer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/UpdateServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_UpdateServer,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.UpdateServerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Server>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.updateServer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/UpdateServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_UpdateServer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.DeleteServerRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_ServerService_DeleteServer = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/DeleteServer',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.DeleteServerRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.core.wcloud.io.v1.DeleteServerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.DeleteServerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.deleteServer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/DeleteServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_DeleteServer,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.DeleteServerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.deleteServer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/DeleteServer',
      request,
      metadata || {},
      methodDescriptor_ServerService_DeleteServer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.MergeserversRequest,
 *   !proto.core.wcloud.io.v1.Server>}
 */
const methodDescriptor_ServerService_MergeServers = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/MergeServers',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.MergeserversRequest,
  proto.core.wcloud.io.v1.Server,
  /**
   * @param {!proto.core.wcloud.io.v1.MergeserversRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Server.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.MergeserversRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Server)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Server>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.mergeServers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/MergeServers',
      request,
      metadata || {},
      methodDescriptor_ServerService_MergeServers,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.MergeserversRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Server>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.mergeServers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/MergeServers',
      request,
      metadata || {},
      methodDescriptor_ServerService_MergeServers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.CreateDiskRequest,
 *   !proto.core.wcloud.io.v1.Disk>}
 */
const methodDescriptor_ServerService_CreateDisk = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/CreateDisk',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.CreateDiskRequest,
  proto.core.wcloud.io.v1.Disk,
  /**
   * @param {!proto.core.wcloud.io.v1.CreateDiskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Disk.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.CreateDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Disk)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Disk>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.createDisk =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/CreateDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_CreateDisk,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.CreateDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Disk>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.createDisk =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/CreateDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_CreateDisk);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.GetDiskRequest,
 *   !proto.core.wcloud.io.v1.Disk>}
 */
const methodDescriptor_ServerService_GetDisk = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/GetDisk',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.GetDiskRequest,
  proto.core.wcloud.io.v1.Disk,
  /**
   * @param {!proto.core.wcloud.io.v1.GetDiskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Disk.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.GetDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Disk)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Disk>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.getDisk =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/GetDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_GetDisk,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.GetDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Disk>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.getDisk =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/GetDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_GetDisk);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.ListDisksRequest,
 *   !proto.core.wcloud.io.v1.ListDisksResponse>}
 */
const methodDescriptor_ServerService_ListDisks = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/ListDisks',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.ListDisksRequest,
  proto.core.wcloud.io.v1.ListDisksResponse,
  /**
   * @param {!proto.core.wcloud.io.v1.ListDisksRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.ListDisksResponse.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.ListDisksRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.ListDisksResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.ListDisksResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.listDisks =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/ListDisks',
      request,
      metadata || {},
      methodDescriptor_ServerService_ListDisks,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.ListDisksRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.ListDisksResponse>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.listDisks =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/ListDisks',
      request,
      metadata || {},
      methodDescriptor_ServerService_ListDisks);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.DeleteDiskRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_ServerService_DeleteDisk = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/DeleteDisk',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.DeleteDiskRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.core.wcloud.io.v1.DeleteDiskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.DeleteDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.deleteDisk =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/DeleteDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_DeleteDisk,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.DeleteDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.deleteDisk =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/DeleteDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_DeleteDisk);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.UpdateDiskRequest,
 *   !proto.core.wcloud.io.v1.Disk>}
 */
const methodDescriptor_ServerService_UpdateDisk = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/UpdateDisk',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.UpdateDiskRequest,
  proto.core.wcloud.io.v1.Disk,
  /**
   * @param {!proto.core.wcloud.io.v1.UpdateDiskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Disk.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.UpdateDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Disk)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Disk>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.updateDisk =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/UpdateDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_UpdateDisk,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.UpdateDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Disk>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.updateDisk =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/UpdateDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_UpdateDisk);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.core.wcloud.io.v1.MoveDiskRequest,
 *   !proto.core.wcloud.io.v1.Disk>}
 */
const methodDescriptor_ServerService_MoveDisk = new grpc.web.MethodDescriptor(
  '/core.wcloud.io.v1.ServerService/MoveDisk',
  grpc.web.MethodType.UNARY,
  proto.core.wcloud.io.v1.MoveDiskRequest,
  proto.core.wcloud.io.v1.Disk,
  /**
   * @param {!proto.core.wcloud.io.v1.MoveDiskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.core.wcloud.io.v1.Disk.deserializeBinary
);


/**
 * @param {!proto.core.wcloud.io.v1.MoveDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.core.wcloud.io.v1.Disk)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.core.wcloud.io.v1.Disk>|undefined}
 *     The XHR Node Readable Stream
 */
proto.core.wcloud.io.v1.ServerServiceClient.prototype.moveDisk =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/MoveDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_MoveDisk,
      callback);
};


/**
 * @param {!proto.core.wcloud.io.v1.MoveDiskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.core.wcloud.io.v1.Disk>}
 *     Promise that resolves to the response
 */
proto.core.wcloud.io.v1.ServerServicePromiseClient.prototype.moveDisk =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/core.wcloud.io.v1.ServerService/MoveDisk',
      request,
      metadata || {},
      methodDescriptor_ServerService_MoveDisk);
};


module.exports = proto.core.wcloud.io.v1;

