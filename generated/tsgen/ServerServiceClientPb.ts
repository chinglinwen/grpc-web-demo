/**
 * @fileoverview gRPC-Web generated client stub for core.wcloud.io.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: server.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as server_pb from './server_pb'; // proto import: "server.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class ServerServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateServer = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/CreateServer',
    grpcWeb.MethodType.UNARY,
    server_pb.CreateServerRequest,
    server_pb.Server,
    (request: server_pb.CreateServerRequest) => {
      return request.serializeBinary();
    },
    server_pb.Server.deserializeBinary
  );

  createServer(
    request: server_pb.CreateServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Server>;

  createServer(
    request: server_pb.CreateServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void): grpcWeb.ClientReadableStream<server_pb.Server>;

  createServer(
    request: server_pb.CreateServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/CreateServer',
        request,
        metadata || {},
        this.methodDescriptorCreateServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/CreateServer',
    request,
    metadata || {},
    this.methodDescriptorCreateServer);
  }

  methodDescriptorGetServer = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/GetServer',
    grpcWeb.MethodType.UNARY,
    server_pb.GetServerRequest,
    server_pb.Server,
    (request: server_pb.GetServerRequest) => {
      return request.serializeBinary();
    },
    server_pb.Server.deserializeBinary
  );

  getServer(
    request: server_pb.GetServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Server>;

  getServer(
    request: server_pb.GetServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void): grpcWeb.ClientReadableStream<server_pb.Server>;

  getServer(
    request: server_pb.GetServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/GetServer',
        request,
        metadata || {},
        this.methodDescriptorGetServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/GetServer',
    request,
    metadata || {},
    this.methodDescriptorGetServer);
  }

  methodDescriptorListServers = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/ListServers',
    grpcWeb.MethodType.UNARY,
    server_pb.ListServersRequest,
    server_pb.ListServersResponse,
    (request: server_pb.ListServersRequest) => {
      return request.serializeBinary();
    },
    server_pb.ListServersResponse.deserializeBinary
  );

  listServers(
    request: server_pb.ListServersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.ListServersResponse>;

  listServers(
    request: server_pb.ListServersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.ListServersResponse) => void): grpcWeb.ClientReadableStream<server_pb.ListServersResponse>;

  listServers(
    request: server_pb.ListServersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.ListServersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/ListServers',
        request,
        metadata || {},
        this.methodDescriptorListServers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/ListServers',
    request,
    metadata || {},
    this.methodDescriptorListServers);
  }

  methodDescriptorUpdateServer = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/UpdateServer',
    grpcWeb.MethodType.UNARY,
    server_pb.UpdateServerRequest,
    server_pb.Server,
    (request: server_pb.UpdateServerRequest) => {
      return request.serializeBinary();
    },
    server_pb.Server.deserializeBinary
  );

  updateServer(
    request: server_pb.UpdateServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Server>;

  updateServer(
    request: server_pb.UpdateServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void): grpcWeb.ClientReadableStream<server_pb.Server>;

  updateServer(
    request: server_pb.UpdateServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/UpdateServer',
        request,
        metadata || {},
        this.methodDescriptorUpdateServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/UpdateServer',
    request,
    metadata || {},
    this.methodDescriptorUpdateServer);
  }

  methodDescriptorDeleteServer = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/DeleteServer',
    grpcWeb.MethodType.UNARY,
    server_pb.DeleteServerRequest,
    google_protobuf_empty_pb.Empty,
    (request: server_pb.DeleteServerRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteServer(
    request: server_pb.DeleteServerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteServer(
    request: server_pb.DeleteServerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteServer(
    request: server_pb.DeleteServerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/DeleteServer',
        request,
        metadata || {},
        this.methodDescriptorDeleteServer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/DeleteServer',
    request,
    metadata || {},
    this.methodDescriptorDeleteServer);
  }

  methodDescriptorMergeServers = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/MergeServers',
    grpcWeb.MethodType.UNARY,
    server_pb.MergeserversRequest,
    server_pb.Server,
    (request: server_pb.MergeserversRequest) => {
      return request.serializeBinary();
    },
    server_pb.Server.deserializeBinary
  );

  mergeServers(
    request: server_pb.MergeserversRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Server>;

  mergeServers(
    request: server_pb.MergeserversRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void): grpcWeb.ClientReadableStream<server_pb.Server>;

  mergeServers(
    request: server_pb.MergeserversRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Server) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/MergeServers',
        request,
        metadata || {},
        this.methodDescriptorMergeServers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/MergeServers',
    request,
    metadata || {},
    this.methodDescriptorMergeServers);
  }

  methodDescriptorCreateDisk = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/CreateDisk',
    grpcWeb.MethodType.UNARY,
    server_pb.CreateDiskRequest,
    server_pb.Disk,
    (request: server_pb.CreateDiskRequest) => {
      return request.serializeBinary();
    },
    server_pb.Disk.deserializeBinary
  );

  createDisk(
    request: server_pb.CreateDiskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Disk>;

  createDisk(
    request: server_pb.CreateDiskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void): grpcWeb.ClientReadableStream<server_pb.Disk>;

  createDisk(
    request: server_pb.CreateDiskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/CreateDisk',
        request,
        metadata || {},
        this.methodDescriptorCreateDisk,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/CreateDisk',
    request,
    metadata || {},
    this.methodDescriptorCreateDisk);
  }

  methodDescriptorGetDisk = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/GetDisk',
    grpcWeb.MethodType.UNARY,
    server_pb.GetDiskRequest,
    server_pb.Disk,
    (request: server_pb.GetDiskRequest) => {
      return request.serializeBinary();
    },
    server_pb.Disk.deserializeBinary
  );

  getDisk(
    request: server_pb.GetDiskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Disk>;

  getDisk(
    request: server_pb.GetDiskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void): grpcWeb.ClientReadableStream<server_pb.Disk>;

  getDisk(
    request: server_pb.GetDiskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/GetDisk',
        request,
        metadata || {},
        this.methodDescriptorGetDisk,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/GetDisk',
    request,
    metadata || {},
    this.methodDescriptorGetDisk);
  }

  methodDescriptorListDisks = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/ListDisks',
    grpcWeb.MethodType.UNARY,
    server_pb.ListDisksRequest,
    server_pb.ListDisksResponse,
    (request: server_pb.ListDisksRequest) => {
      return request.serializeBinary();
    },
    server_pb.ListDisksResponse.deserializeBinary
  );

  listDisks(
    request: server_pb.ListDisksRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.ListDisksResponse>;

  listDisks(
    request: server_pb.ListDisksRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.ListDisksResponse) => void): grpcWeb.ClientReadableStream<server_pb.ListDisksResponse>;

  listDisks(
    request: server_pb.ListDisksRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.ListDisksResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/ListDisks',
        request,
        metadata || {},
        this.methodDescriptorListDisks,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/ListDisks',
    request,
    metadata || {},
    this.methodDescriptorListDisks);
  }

  methodDescriptorDeleteDisk = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/DeleteDisk',
    grpcWeb.MethodType.UNARY,
    server_pb.DeleteDiskRequest,
    google_protobuf_empty_pb.Empty,
    (request: server_pb.DeleteDiskRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteDisk(
    request: server_pb.DeleteDiskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteDisk(
    request: server_pb.DeleteDiskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteDisk(
    request: server_pb.DeleteDiskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/DeleteDisk',
        request,
        metadata || {},
        this.methodDescriptorDeleteDisk,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/DeleteDisk',
    request,
    metadata || {},
    this.methodDescriptorDeleteDisk);
  }

  methodDescriptorUpdateDisk = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/UpdateDisk',
    grpcWeb.MethodType.UNARY,
    server_pb.UpdateDiskRequest,
    server_pb.Disk,
    (request: server_pb.UpdateDiskRequest) => {
      return request.serializeBinary();
    },
    server_pb.Disk.deserializeBinary
  );

  updateDisk(
    request: server_pb.UpdateDiskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Disk>;

  updateDisk(
    request: server_pb.UpdateDiskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void): grpcWeb.ClientReadableStream<server_pb.Disk>;

  updateDisk(
    request: server_pb.UpdateDiskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/UpdateDisk',
        request,
        metadata || {},
        this.methodDescriptorUpdateDisk,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/UpdateDisk',
    request,
    metadata || {},
    this.methodDescriptorUpdateDisk);
  }

  methodDescriptorMoveDisk = new grpcWeb.MethodDescriptor(
    '/core.wcloud.io.v1.ServerService/MoveDisk',
    grpcWeb.MethodType.UNARY,
    server_pb.MoveDiskRequest,
    server_pb.Disk,
    (request: server_pb.MoveDiskRequest) => {
      return request.serializeBinary();
    },
    server_pb.Disk.deserializeBinary
  );

  moveDisk(
    request: server_pb.MoveDiskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<server_pb.Disk>;

  moveDisk(
    request: server_pb.MoveDiskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void): grpcWeb.ClientReadableStream<server_pb.Disk>;

  moveDisk(
    request: server_pb.MoveDiskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.Disk) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/core.wcloud.io.v1.ServerService/MoveDisk',
        request,
        metadata || {},
        this.methodDescriptorMoveDisk,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/core.wcloud.io.v1.ServerService/MoveDisk',
    request,
    metadata || {},
    this.methodDescriptorMoveDisk);
  }

}

